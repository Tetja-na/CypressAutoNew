{
  "stats": {
    "suites": 1,
    "tests": 1,
    "passes": 0,
    "pending": 0,
    "failures": 1,
    "start": "2025-09-07T14:52:27.338Z",
    "end": "2025-09-07T14:52:32.991Z",
    "duration": 5653,
    "testsRegistered": 4,
    "passPercent": 0,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 3,
    "hasSkipped": true
  },
  "results": [
    {
      "uuid": "e9e8a216-a126-4a79-8c3c-56adfb713e53",
      "title": "",
      "fullFile": "cypress\\e2e\\car_expense_api.cy.js",
      "file": "cypress\\e2e\\car_expense_api.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "200deab7-adb9-4dd8-a751-46a3007b8a40",
          "title": "Car & Expense API + UI tests with intercept, alias and fixtures",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Intercept and alias POST /api/cars when creating car via UI",
              "fullTitle": "Car & Expense API + UI tests with intercept, alias and fixtures Intercept and alias POST /api/cars when creating car via UI",
              "timedOut": null,
              "duration": 5288,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const car = this.carData;\ncy.intercept('POST', '/api/cars').as('postCar');\n_garagePage.default.addCar(car.brand, car.model, car.mileage.toString());\ncy.wait('@postCar').then(({\n  response\n}) => {\n  expect(response.statusCode).to.eq(201);\n  createdCarId = response.body.data.id;\n  expect(createdCarId).to.exist;\n  // Зберігаємо у фікстуру, якщо потрібно\n  cy.writeFile('cypress/fixtures/carId.json', {\n    id: createdCarId\n  });\n});\ncy.contains(car.brand).should('be.visible');\ncy.contains(car.model).should('be.visible');",
              "err": {
                "message": "CypressError: `cy.type()` can only accept a string or number. You passed in: `undefined`\n\nhttps://on.cypress.io/type\n\nBecause this error occurred during a `before each` hook we are skipping the remaining tests in the current suite: `Car & Expense API + UI test...`",
                "estack": "CypressError: `cy.type()` can only accept a string or number. You passed in: `undefined`\n\nhttps://on.cypress.io/type\n\nBecause this error occurred during a `before each` hook we are skipping the remaining tests in the current suite: `Car & Expense API + UI test...`\n    at Context.type (https://qauto.forstudy.space/__cypress/runner/cypress_runner.js:116877:68)\n    at wrapped (https://qauto.forstudy.space/__cypress/runner/cypress_runner.js:141671:19)\nFrom Your Spec Code:\n    at LoginPage.login (webpack://cypressautonew/./cypress/pages/loginPage.js:13:27)\n    at Context.eval (webpack://cypressautonew/./cypress/e2e/car_expense_api.cy.js:17:14)",
                "diff": null
              },
              "uuid": "0ed77837-d54f-47b0-ada0-f2f08c4423d0",
              "parentUUID": "200deab7-adb9-4dd8-a751-46a3007b8a40",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Validate created car via GET /api/cars",
              "fullTitle": "Car & Expense API + UI tests with intercept, alias and fixtures Validate created car via GET /api/cars",
              "timedOut": null,
              "duration": 0,
              "state": "skipped",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'GET',\n  url: '/api/cars'\n}).then(resp => {\n  expect(resp.status).to.eq(200);\n  const cars = resp.body.data;\n  const car = cars.find(c => c.id === createdCarId);\n  expect(car).to.exist;\n  expect(car.brand).to.eq(this.carData.brand);\n  expect(car.model).to.eq(this.carData.model);\n});",
              "err": {},
              "uuid": "f0694739-367c-4c68-a17f-a23375297b75",
              "parentUUID": "200deab7-adb9-4dd8-a751-46a3007b8a40",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "Create expense via API using intercept and alias",
              "fullTitle": "Car & Expense API + UI tests with intercept, alias and fixtures Create expense via API using intercept and alias",
              "timedOut": null,
              "duration": 0,
              "state": "skipped",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.intercept('POST', '/api/expenses').as('createExpense');\ncy.createExpense(createdCarId, {\n  mileage: this.carData.mileage,\n  liters: this.carData.liters,\n  totalCost: this.carData.totalCost\n});\ncy.wait('@createExpense').its('response.statusCode').should('eq', 201);",
              "err": {},
              "uuid": "2d24045e-356a-4000-b89f-d3f4bba4841d",
              "parentUUID": "200deab7-adb9-4dd8-a751-46a3007b8a40",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "Validate expense in UI for that car",
              "fullTitle": "Car & Expense API + UI tests with intercept, alias and fixtures Validate expense in UI for that car",
              "timedOut": null,
              "duration": 0,
              "state": "skipped",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit('/panel/garage');\n_garagePage.default.openExpenses();\ncy.contains(this.carData.totalCost.toString()).should('be.visible');\ncy.contains(this.carData.liters.toString()).should('be.visible');",
              "err": {},
              "uuid": "66d4b118-e0a0-4241-902c-2d907a16d5be",
              "parentUUID": "200deab7-adb9-4dd8-a751-46a3007b8a40",
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "0ed77837-d54f-47b0-ada0-f2f08c4423d0"
          ],
          "pending": [],
          "skipped": [
            "f0694739-367c-4c68-a17f-a23375297b75",
            "2d24045e-356a-4000-b89f-d3f4bba4841d",
            "66d4b118-e0a0-4241-902c-2d907a16d5be"
          ],
          "duration": 5288,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/reports",
        "overwrite": true,
        "html": true,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}